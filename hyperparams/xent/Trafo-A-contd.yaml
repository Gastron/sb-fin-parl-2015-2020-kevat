# ############################################################################
# Model: E2E ASR with attention-based ASR
# Training data: FINNISH PARLIAMENT (First release) 30min/spk subset
# Encoder: CRDNN
# Decoder: GRU + beamsearch + RNNLM
# Authors: Aku Rouhe 2021 
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are instantiated
seed: 2602
__set_seed: !apply:torch.manual_seed [!ref <seed>]

trainshards: ./train-shards-xent-chunks/shard-000{000..574}.tar
validshards: ./dev-all-shards-xent-chunks-fixed//shard-00000{0..3}.tar
# data_folder_rirs: ./augmentation_data # noise/ris dataset will automatically be downloaded here
num_units: 2328
output_folder: !ref exp/xent-am/Trafo-A-contd/<seed>-<num_units>units
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

pretrain_from: !ref exp/xent-am/Trafo-A/<seed>-<num_units>units/save

gradient_accumulation: 2

# Test files:
prior_file: !ref <output_folder>/prior.pth
test_max_key: "accuracy"
test_feats: kaldi-s5/data/parl-dev-all-fixed_hires/feats.scp
test_probs_out: !ref <output_folder>/test_probs.ark

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# Training parameters
number_of_epochs: 20

train_loader_kwargs:
    num_workers: 4
    looped_nominal_epoch: 6000
prior_loader_kwargs:
    num_workers: 4
    looped_nominal_epoch: 1000
train_batchsize: 256
valid_batchsize: 64
ckpt_interval_minutes: -1 # save checkpoint every N min
label_smoothing: 0.0
lr: 0.1

# Shape parameters
n_mels: 80
chunklen: 140
contextlen: 40
subsampling: 3
front_index: !apply:math.ceil
  - !ref <contextlen> / <subsampling>
back_index: !apply:math.floor
  - !ref <contextlen> / <subsampling> + <chunklen> / <subsampling> 


# Common Model params
d_model: 384

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Feature normalization (mean and std)
normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global

stacker: !new:local.Stacker
  n: 3

transformer: !new:trafo.TransformerAM
  input_size: !ref <n_mels> * <stacker[n]>
  d_model: !ref <d_model>
  nhead: 8
  num_encoder_layers: 8
  dropout: 0.2
  activation: !name:torch.nn.GELU
  d_ffn: 1024
  normalize_before: True
  positional_encoding: "fixed_abs_sine"

encoder: !new:speechbrain.nnet.containers.LengthsCapableSequential
  - !ref <stacker>
  - !ref <transformer>

# Linear transformation on the top of the decoder.
lin_out: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <num_units>

# Final softmax (for log posteriors computation).
log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class
modules:
    encoder: !ref <encoder>
    lin_out: !ref <lin_out>
    normalize: !ref <normalize>


lr_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr>
    n_warmup_steps: 2000
    model_size: !ref <d_model>

opt_class: !name:torch.optim.SGD
      lr: !ref <lr> 

# Functions that compute the statistics to track during the validation step.
accuracy_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        encoder: !ref <encoder>
        lin_out: !ref <lin_out>
        normalizer: !ref <normalize>
        scheduler: !ref <lr_annealing>
        counter: !ref <epoch_counter>

ckpt_finder: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <pretrain_from>

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <output_folder>/pretrain_files
    loadables:
        encoder: !ref <encoder>
        lin_out: !ref <lin_out>
        normalizer: !ref <normalize>
