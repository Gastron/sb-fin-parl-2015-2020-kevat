# ############################################################################
# Model: E2E ASR with attention-based ASR
# Training data: FINNISH PARLIAMENT (First release) 30min/spk subset
# Encoder: CRDNN
# Decoder: GRU + beamsearch + RNNLM
# Authors: Aku Rouhe 2021 
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are instantiated
seed: 2602
__set_seed: !apply:torch.manual_seed [!ref <seed>]

trainshards: ./train-shards-feat-ali/shard-0000{00..69}.tar
num_utts_train: 1109736 
validshards: ./dev-shards-feat-ali/shard-00000{0..1}.tar
# data_folder_rirs: ./augmentation_data # noise/ris dataset will automatically be downloaded here
num_units: 2328
output_folder: !ref exp/xent-am/CRDNN-C/<seed>-<num_units>units
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Test files:
prior_file: !ref <output_folder>/prior.pth
test_max_key: "accuracy"
test_feats: kaldi-s5/data/parl-dev-all-fixed_hires/feats.scp
test_probs_out: !ref <output_folder>/test_probs.ark

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# Training parameters
number_of_epochs: 100

dynamic_batch_kwargs:
    len_key: "feats"
    sampler_kwargs:
        target_batch_numel: 9000 # 
        max_batch_numel: 12000 
    max_sample_len: 2500

train_loader_kwargs:
    num_workers: 4
    looped_nominal_epoch: 5000
prior_loader_kwargs:
    num_workers: 10
    looped_nominal_epoch: 20000
train_batchsize: 64
valid_batchsize: 12
ckpt_interval_minutes: -1 # save checkpoint every N min
label_smoothing: 0.0
lr: 0.0001

# Shape parameters
n_mels: 80
subsampling: 3

# Model parameters
activation: !name:torch.nn.LeakyReLU
dropout: 0.15
cnn_blocks: 2
cnn_channels: (64, 128)
inter_layer_pooling_size: (2, 2)
cnn_kernelsize: (3, 3)
time_pooling_size: 3
rnn_class: !name:speechbrain.nnet.RNN.LSTM
rnn_layers: 3
rnn_neurons: 512
rnn_bidirectional: True
dnn_blocks: 1
dnn_neurons: 512
emb_size: 128
output_neurons: !ref <num_units>  #Number of tokens (same as LM)

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Feature normalization (mean and std)
normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global

# The CRDNN model is an encoder that combines CNNs, RNNs, and DNNs.
encoder: !new:speechbrain.lobes.models.CRDNN.CRDNN
    input_shape: [null, null, !ref <n_mels>]
    activation: !ref <activation>
    dropout: !ref <dropout>
    cnn_blocks: !ref <cnn_blocks>
    cnn_channels: !ref <cnn_channels>
    cnn_kernelsize: !ref <cnn_kernelsize>
    inter_layer_pooling_size: !ref <inter_layer_pooling_size>
    time_pooling: True
    using_2d_pooling: False
    time_pooling_size: !ref <time_pooling_size>
    rnn_class: !ref <rnn_class>
    rnn_layers: !ref <rnn_layers>
    rnn_neurons: !ref <rnn_neurons>
    rnn_bidirectional: !ref <rnn_bidirectional>
    rnn_re_init: True
    dnn_blocks: !ref <dnn_blocks>
    dnn_neurons: !ref <dnn_neurons>
    use_rnnp: False

# Linear transformation on the top of the decoder.
lin_out: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <dnn_neurons>
    n_neurons: !ref <num_units>

# Final softmax (for log posteriors computation).
log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class
modules:
    encoder: !ref <encoder>
    lin_out: !ref <lin_out>
    normalize: !ref <normalize>

lr_annealing: !new:local.NoSchedule
    lr: !ref <lr>

opt_class: !name:torch.optim.Adam
      lr: !ref <lr> 

# Functions that compute the statistics to track during the validation step.
accuracy_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        encoder: !ref <encoder>
        lin_out: !ref <lin_out>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>
